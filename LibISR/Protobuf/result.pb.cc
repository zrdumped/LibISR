// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: result.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "result.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace protocol {

namespace {

const ::google::protobuf::Descriptor* TracingResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TracingResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* Command_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Command_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_result_2eproto() {
  protobuf_AddDesc_result_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "result.proto");
  GOOGLE_CHECK(file != NULL);
  TracingResult_descriptor_ = file->message_type(0);
  static const int TracingResult_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TracingResult, result_),
  };
  TracingResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TracingResult_descriptor_,
      TracingResult::default_instance_,
      TracingResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TracingResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TracingResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TracingResult));
  Command_descriptor_ = file->message_type(1);
  static const int Command_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Command, commandid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Command, tracednum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Command, tracedobjname_),
  };
  Command_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Command_descriptor_,
      Command::default_instance_,
      Command_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Command, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Command, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Command));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_result_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TracingResult_descriptor_, &TracingResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Command_descriptor_, &Command::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_result_2eproto() {
  delete TracingResult::default_instance_;
  delete TracingResult_reflection_;
  delete Command::default_instance_;
  delete Command_reflection_;
}

void protobuf_AddDesc_result_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014result.proto\022\010protocol\"\037\n\rTracingResul"
    "t\022\016\n\006result\030\001 \003(\002\"F\n\007Command\022\021\n\tcommandI"
    "D\030\001 \002(\005\022\021\n\ttracedNum\030\002 \001(\005\022\025\n\rtracedObjN"
    "ame\030\003 \003(\t", 129);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "result.proto", &protobuf_RegisterTypes);
  TracingResult::default_instance_ = new TracingResult();
  Command::default_instance_ = new Command();
  TracingResult::default_instance_->InitAsDefaultInstance();
  Command::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_result_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_result_2eproto {
  StaticDescriptorInitializer_result_2eproto() {
    protobuf_AddDesc_result_2eproto();
  }
} static_descriptor_initializer_result_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int TracingResult::kResultFieldNumber;
#endif  // !_MSC_VER

TracingResult::TracingResult()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.TracingResult)
}

void TracingResult::InitAsDefaultInstance() {
}

TracingResult::TracingResult(const TracingResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:protocol.TracingResult)
}

void TracingResult::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TracingResult::~TracingResult() {
  // @@protoc_insertion_point(destructor:protocol.TracingResult)
  SharedDtor();
}

void TracingResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TracingResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TracingResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TracingResult_descriptor_;
}

const TracingResult& TracingResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_result_2eproto();
  return *default_instance_;
}

TracingResult* TracingResult::default_instance_ = NULL;

TracingResult* TracingResult::New() const {
  return new TracingResult;
}

void TracingResult::Clear() {
  result_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TracingResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.TracingResult)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated float result = 1;
      case 1: {
        if (tag == 13) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 13, input, this->mutable_result())));
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_result())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(13)) goto parse_result;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.TracingResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.TracingResult)
  return false;
#undef DO_
}

void TracingResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.TracingResult)
  // repeated float result = 1;
  for (int i = 0; i < this->result_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      1, this->result(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.TracingResult)
}

::google::protobuf::uint8* TracingResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.TracingResult)
  // repeated float result = 1;
  for (int i = 0; i < this->result_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatToArray(1, this->result(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.TracingResult)
  return target;
}

int TracingResult::ByteSize() const {
  int total_size = 0;

  // repeated float result = 1;
  {
    int data_size = 0;
    data_size = 4 * this->result_size();
    total_size += 1 * this->result_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TracingResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TracingResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TracingResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TracingResult::MergeFrom(const TracingResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  result_.MergeFrom(from.result_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TracingResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TracingResult::CopyFrom(const TracingResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TracingResult::IsInitialized() const {

  return true;
}

void TracingResult::Swap(TracingResult* other) {
  if (other != this) {
    result_.Swap(&other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TracingResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TracingResult_descriptor_;
  metadata.reflection = TracingResult_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Command::kCommandIDFieldNumber;
const int Command::kTracedNumFieldNumber;
const int Command::kTracedObjNameFieldNumber;
#endif  // !_MSC_VER

Command::Command()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.Command)
}

void Command::InitAsDefaultInstance() {
}

Command::Command(const Command& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:protocol.Command)
}

void Command::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  commandid_ = 0;
  tracednum_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Command::~Command() {
  // @@protoc_insertion_point(destructor:protocol.Command)
  SharedDtor();
}

void Command::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Command::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Command::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Command_descriptor_;
}

const Command& Command::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_result_2eproto();
  return *default_instance_;
}

Command* Command::default_instance_ = NULL;

Command* Command::New() const {
  return new Command;
}

void Command::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Command*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(commandid_, tracednum_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  tracedobjname_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Command::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.Command)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 commandID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &commandid_)));
          set_has_commandid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_tracedNum;
        break;
      }

      // optional int32 tracedNum = 2;
      case 2: {
        if (tag == 16) {
         parse_tracedNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tracednum_)));
          set_has_tracednum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_tracedObjName;
        break;
      }

      // repeated string tracedObjName = 3;
      case 3: {
        if (tag == 26) {
         parse_tracedObjName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_tracedobjname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->tracedobjname(this->tracedobjname_size() - 1).data(),
            this->tracedobjname(this->tracedobjname_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "tracedobjname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_tracedObjName;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.Command)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.Command)
  return false;
#undef DO_
}

void Command::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.Command)
  // required int32 commandID = 1;
  if (has_commandid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->commandid(), output);
  }

  // optional int32 tracedNum = 2;
  if (has_tracednum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->tracednum(), output);
  }

  // repeated string tracedObjName = 3;
  for (int i = 0; i < this->tracedobjname_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->tracedobjname(i).data(), this->tracedobjname(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "tracedobjname");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->tracedobjname(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.Command)
}

::google::protobuf::uint8* Command::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.Command)
  // required int32 commandID = 1;
  if (has_commandid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->commandid(), target);
  }

  // optional int32 tracedNum = 2;
  if (has_tracednum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->tracednum(), target);
  }

  // repeated string tracedObjName = 3;
  for (int i = 0; i < this->tracedobjname_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tracedobjname(i).data(), this->tracedobjname(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tracedobjname");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->tracedobjname(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.Command)
  return target;
}

int Command::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 commandID = 1;
    if (has_commandid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->commandid());
    }

    // optional int32 tracedNum = 2;
    if (has_tracednum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tracednum());
    }

  }
  // repeated string tracedObjName = 3;
  total_size += 1 * this->tracedobjname_size();
  for (int i = 0; i < this->tracedobjname_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->tracedobjname(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Command::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Command* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Command*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Command::MergeFrom(const Command& from) {
  GOOGLE_CHECK_NE(&from, this);
  tracedobjname_.MergeFrom(from.tracedobjname_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_commandid()) {
      set_commandid(from.commandid());
    }
    if (from.has_tracednum()) {
      set_tracednum(from.tracednum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Command::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Command::CopyFrom(const Command& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Command::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Command::Swap(Command* other) {
  if (other != this) {
    std::swap(commandid_, other->commandid_);
    std::swap(tracednum_, other->tracednum_);
    tracedobjname_.Swap(&other->tracedobjname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Command::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Command_descriptor_;
  metadata.reflection = Command_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace protocol

// @@protoc_insertion_point(global_scope)
